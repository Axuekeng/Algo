package sort;

import util.StdOut;
import util.StdRandom;

/**
 * Created by Administrator on 2016/5/9.
 */
public class Quick {
    public static void sort(int[] a) {
        StdRandom.shuffle(a); //打乱输入数组的元素间的相对顺序，避免出现最坏情况
        sort(a, 0, a.length - 1);
    }

    private static void sort(int[] a, int low, int high) {
        if (high <= low) {
            return;
        }
        int j = partition(a, low, high);
        sort(a, low, j-1);
        sort(a, j+1, high);
    }

    private static int partition(int[] a, int low, int high) {
        int i = low;
        int j = high + 1;

        //p为切分元素
        int p = a[low];
        while (true) {
            //从数组中的第二个元素开始寻找第一个大于等于切分元素的数组元素，若找到则i为其索引
            while (a[++i] < p) {
                if (i == high) {
                    break;
                }
            }
            //此时i为从数组首部开始第一个大于等于切分元素的数组元素的索引，若没有找到则为high

            //从数组末元素开始寻找第一个小于等于切分元素的数组元素，若找到则j为其索引
            while (a[--j] > p) {
                if (j == low) {
                    break;
                }
            }
            //此时j为从数组末开始第一个小于等于切分元素的数组元素的索引，若没有找到则为low

            if (i >= j) {
                break;
            }
            exchange(a, i, j);
        }
        exchange(a, low, j);
        return j;
    }

    public static void exchange(int a[], int i, int j) {
        int temp = a[i];
        a[i] = a[j];
        a[j] = temp;
    }

    public static void main(String[] args) {
        int N = 20;
        int a[] = new int[N];
        for (int i = 0; i < N; i++) {
            a[i] = StdRandom.uniform(100*N);
        }
        //int[] a = {88, 9, 8, 7, 6, 5, 4, 3, 2, 1};
        sort(a);
        for (Integer i : a) {
            StdOut.print(i + " ");
        }
    }
}
